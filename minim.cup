/**********************************************************************
 Java CUP specification for a parser for minim programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).lineNum,
                     ((TokenVal)currToken.value).charNum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                INPUT;
terminal                DISP;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal LinkedList	      varDeclList;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode	      fnBody;
non terminal LinkedList       stmtList;
non terminal StmtNode	      stmt;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody;
non terminal AssignExpNode    assignExp; 
non terminal ExpNode 	      exp;
non terminal ExpNode	      term;
non terminal ExpNode 	      loc;
non terminal LinkedList       actualList;
non terminal CallExpNode      fncall;
 
/* NOTE: Add precedence and associativity declarations here */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc NOT;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
		| fnDecl:fn
		{: RESULT = fn;
		:}
		| structDecl:s
		{: RESULT = s;
		:}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
		| STRUCT id:i1 id:i2 SEMICOLON
		{: RESULT = new VarDeclNode(new StructNode(i1), i2, 0);
		:}
                ;

varDeclList     ::= varDeclList:vL varDecl:v
		{:  vL.addLast(v);
		    RESULT = vL;
		:}
		| /*epsilon */
		{: RESULT = new LinkedList();
		:}
		; 

fnDecl          ::= type:t id:i formals:f fnBody:fn
		{: RESULT = new FnDeclNode(t, i, f, fn);
		:}
		;

structDecl      ::= STRUCT id:i LCURLY structBody:s RCURLY SEMICOLON
		{: RESULT = new StructDeclNode(i, new DeclListNode(s));
		:}
		;

structBody	::= structBody:s varDecl:v
		{: s.addLast(v);
		   RESULT = s;
		:}
		| varDecl:v
		{: LinkedList<DeclNode> L = new LinkedList<DeclNode>();
		   L.addLast(v);
		   RESULT = L;
		:}
		;

formals		::= LPAREN RPAREN
		{: RESULT = new FormalsListNode(new LinkedList());
		:}
		| LPAREN formalsList:f RPAREN
		{: RESULT = new FormalsListNode(f);
		:}
		;

formalsList     ::= formalDecl:f
		{: LinkedList L = new LinkedList();
		   L.addLast(f);
		   RESULT = L;
		:}
		| formalDecl:f COMMA formalsList:fl
		{: fl.addFirst(f);
		   RESULT = fl;
		:}
		;

formalDecl	::= type:t id:i
		{: RESULT = new FormalDeclNode(t, i);
		:}
		;

fnBody		::= LCURLY varDeclList:vL stmtList:sL RCURLY
		{: RESULT = new FnBodyNode(new DeclListNode(vL), new StmtListNode(sL));
		:}
		;

stmtList        ::= stmtList:sL stmt:s
		{:sL.addLast(s);
		  RESULT = sL;
		:}
		| /*epsilon*/
		{: RESULT = new LinkedList();
		:}
		;

stmt		::= assignExp:a SEMICOLON
		{: RESULT = new AssignStmtNode(a);
		:}
		| loc:l PLUSPLUS SEMICOLON
		{: RESULT = new PostIncStmtNode(l);
		:}
		| loc:l MINUSMINUS SEMICOLON
		{: RESULT = new PostDecStmtNode(l);
		:}
		| INPUT READ loc:l SEMICOLON
		{: RESULT = new ReadStmtNode(l);
		:}
		| DISP WRITE exp:e SEMICOLON
		{: RESULT = new WriteStmtNode(e);
		:}
		| IF exp:e LCURLY varDeclList:vL stmtList:sL RCURLY
		{: RESULT = new IfStmtNode(e, new DeclListNode(vL), new StmtListNode(sL));
		:}
		| IF exp:e LCURLY varDeclList:vL stmtList:sL RCURLY ELSE LCURLY varDeclList:vL2 stmtList:sL2 RCURLY
		{: RESULT = new IfElseStmtNode(e, new DeclListNode(vL), new StmtListNode(sL), new DeclListNode(vL2), new StmtListNode(sL2));
		:}
		| WHILE exp:e LCURLY varDeclList:vL stmtList:sL RCURLY
		{: RESULT = new WhileStmtNode(e, new DeclListNode(vL), new StmtListNode(sL));
		:}
		| RETURN exp:e SEMICOLON
		{: RESULT = new ReturnStmtNode(e);
		:}
		| RETURN SEMICOLON
		{: RESULT = new ReturnStmtNode(null);
		:}
		| fncall:f SEMICOLON
		{: RESULT = new CallStmtNode(f);
		:}
		; 

assignExp       ::= loc:l ASSIGN exp:e
		{: RESULT = new AssignExpNode(l, e);
		:}
		;

exp		::= assignExp:e
		{: RESULT = e;
		:}
		| exp:e1 PLUS exp:e2
		{: RESULT = new PlusNode(e1, e2);
		:}
		| exp:e1 MINUS exp:e2
		{: RESULT = new MinusNode(e1, e2);
		:}
		| exp:e1 TIMES exp:e2
		{: RESULT = new TimesNode(e1, e2);
		:}
		| exp:e1 DIVIDE exp:e2
		{: RESULT = new DivideNode(e1, e2);
		:} 
		| NOT exp:e
		{: RESULT = new NotNode(e);
		:}
		| exp:e1 AND exp:e2
		{: RESULT = new AndNode(e1, e2);
		:}
		| exp:e1 OR exp:e2
		{: RESULT = new OrNode(e1, e2);
		:}
		| exp:e1 EQUALS exp:e2
		{: RESULT = new EqualsNode(e1, e2);
		:}
		| exp:e1 NOTEQUALS exp:e2
		{: RESULT = new NotEqualsNode(e1, e2);
		:}
		| exp:e1 LESS exp:e2
		{: RESULT = new LessNode(e1, e2);
		:} 
		| exp:e1 GREATER exp:e2
		{: RESULT = new GreaterNode(e1, e2);
		:}
		| exp:e1 LESSEQ exp:e2
		{: RESULT = new LessEqNode(e1, e2);
		:}
		| exp:e1 GREATEREQ exp:e2
		{: RESULT = new GreaterEqNode(e1, e2);
		:}
		| MINUS term:t
		{: RESULT = new UnaryMinusNode(t);
		:}
		| term:t
		{: RESULT = t;
		:} 
		;

term		::= loc:l
		{: RESULT = l;
		:}
		| INTLITERAL:i
		{: RESULT = new IntLitNode(i.lineNum, i.charNum, i.intVal);
		:}
		| STRINGLITERAL:s
		{: RESULT = new StringLitNode(s.lineNum, s.charNum, s.strVal);
		:}
		| TRUE:t
		{: RESULT = new TrueNode(t.lineNum, t.charNum);
		:}
		| FALSE:f
		{: RESULT = new FalseNode(f.lineNum, f.charNum);
		:}
		| LPAREN exp:e RPAREN
		{: RESULT = e;
		:}
		| fncall:f
		{: RESULT = f;
		:}
		;

fncall		::= id:i LPAREN RPAREN
		{: RESULT = new CallExpNode(i);
		:}
		| id:i LPAREN actualList:aL RPAREN
		{: RESULT = new CallExpNode(i, new ExpListNode(aL));
		:}
		;

actualList	::= exp:e
		{: LinkedList<ExpNode> aL = new LinkedList<ExpNode>();
		   aL.addLast(e);
		   RESULT = aL;
		:}
		| actualList:aL COMMA exp:e
		{: aL.addLast(e);
		   RESULT = aL;
		:}
		;

type            ::= INT
                {: RESULT = new IntNode();
                :}
		| BOOL
		{: RESULT = new BoolNode();
		:}
		| VOID
		{: RESULT = new VoidNode();
		:}
                ;

loc		::= id:i
		{: RESULT = i;
		:}
		| loc:l DOT id:i
		{: RESULT = new DotAccessExpNode(l, i);
		:}
		;

id              ::= ID:i
                {: RESULT = new IdNode(i.lineNum, i.charNum, i.idVal);
                :}
                ;
				
